#https://towardsdatascience.com/speech-recognition-with-timestamps-934ede4234b2
#pip install youtube_transcript_api #this is just for the transcript stuff that is there generated by google.  
#pip install vosk
#pip install ffmpeg
#choco install ffmpeg
#pip install moviepy
#pip install pydub
#https://alphacephei.com/vosk/models
import wave
import json
import moviepy.editor as mp
from vosk import Model, KaldiRecognizer, SetLogLevel
import Word as custom_Word
from pydub import AudioSegment
from os import path
import subprocess
import glob
import os


def transcribe_me(filename):
    fn = filename.split('.')

    my_clip = mp.VideoFileClip(filename)

    temp_file = fn[0] + ".mp3"
    my_clip.audio.write_audiofile(temp_file)

    #subprocess.call(['ffmpeg', '-i', temp_file + ".mp3",
    #                   temp_file + ".wav"])

    audio_filename = fn[0] + ".wav"
    txt_filename = fn[0] + ".txt"

    sound = AudioSegment.from_mp3(temp_file)
    sound.export(audio_filename, format="wav")


    model_path = "../models/vosk-model-en-us-0.22"

    model = Model(model_path)
    wf = wave.open(audio_filename, "rb")
    rec = KaldiRecognizer(model, wf.getframerate())
    rec.SetWords(True)

    # get the list of JSON dictionaries
    results = []
    # recognize speech using vosk model
    while True:
        data = wf.readframes(4000)
        if len(data) == 0:
            break
        if rec.AcceptWaveform(data):
            part_result = json.loads(rec.Result())
            results.append(part_result)
    part_result = json.loads(rec.FinalResult())
    results.append(part_result)

    # convert list of JSON dictionaries to list of 'Word' objects
    list_of_words = []
    for sentence in results:
        if len(sentence) == 1:
            # sometimes there are bugs in recognition 
            # and it returns an empty dictionary
            # {'text': ''}
            continue
        for obj in sentence['result']:
            w = custom_Word.Word(obj)  # create custom Word object
            list_of_words.append(w)  # and add it to list

    wf.close()  # close audiofile

    # output to the screen
    f = open(txt_filename, "w")
    for word in list_of_words:
        print(word.to_string())
        f.write(word.to_string())
        
    f.close()
    

list_of_files = glob.glob('C:/Users/devin/Videos/*.mkv') # * means all if need specific format then *.csv
latest_file = max(list_of_files, key=os.path.getctime)
print(latest_file)
#transcribe_me(latest_file)
transcribe_me(r"C:\Users\devin\Videos\2023-02-11 11-23-44.mkv")